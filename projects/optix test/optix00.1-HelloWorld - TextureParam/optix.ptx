//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__phong
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 8 .b8 optixLaunchParams[96];
.global .align 1 .b8 $str[45] = {61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 0};
.global .align 1 .b8 $str1[29] = {78, 97, 117, 32, 82, 97, 121, 45, 84, 114, 97, 99, 105, 110, 103, 32, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 10, 0};
.global .align 1 .b8 $str2[22] = {76, 97, 117, 110, 99, 104, 32, 115, 105, 122, 101, 58, 32, 37, 105, 32, 120, 32, 37, 105, 10, 0};
.global .align 1 .b8 $str3[17] = {67, 111, 108, 111, 114, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry __closesthit__phong(

)
{



	ret;
}

	// .globl	__anyhit__phong
.visible .entry __anyhit__phong(

)
{



	ret;
}

	// .globl	__miss__phong
.visible .entry __miss__phong(

)
{



	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 8 .b8 	__local_depot3[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<5>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<32>;
	.reg .f64 	%fd<17>;
	.reg .b64 	%rd<23>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%r8), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r9), _optix_get_launch_index_y, ();
	// inline asm
	// inline asm
	call (%r11), _optix_get_launch_dimension_x, ();
	// inline asm
	// inline asm
	call (%r12), _optix_get_launch_dimension_y, ();
	// inline asm
	cvt.rn.f64.u32	%fd1, %r8;
	ld.const.u32 	%r5, [optixLaunchParams];
	cvt.rn.f64.s32	%fd5, %r5;
	fma.rn.f64 	%fd16, %fd5, 0d3FB999999999999A, %fd1;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r14}, %fd16;
	}
	and.b32  	%r15, %r14, 2147483647;
	setp.ne.s32	%p1, %r15, 2146435072;
	@%p1 bra 	BB3_3;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r16, %temp}, %fd16;
	}
	setp.ne.s32	%p2, %r16, 0;
	@%p2 bra 	BB3_3;

	mov.f64 	%fd6, 0d0000000000000000;
	mul.rn.f64 	%fd16, %fd16, %fd6;

BB3_3:
	mul.f64 	%fd7, %fd16, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r17, %fd7;
	add.u64 	%rd2, %SP, 24;
	add.u64 	%rd3, %SPL, 24;
	st.local.u32 	[%rd3], %r17;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r18}, %fd16;
	}
	and.b32  	%r19, %r18, 2145386496;
	setp.lt.u32	%p3, %r19, 1105199104;
	@%p3 bra 	BB3_5;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd2;
	call.uni 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	
	//{
	}// Callseq End 0

BB3_5:
	mul.f64 	%fd8, %fd1, 0d3F70000000000000;
	cvt.rn.ftz.f32.f64	%f1, %fd8;
	cvt.rn.f64.u32	%fd9, %r9;
	mul.f64 	%fd10, %fd9, 0d3F70000000000000;
	cvt.rn.ftz.f32.f64	%f2, %fd10;
	ld.const.u64 	%rd1, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd5, %rd1;
	ld.global.u64 	%rd6, [%rd5+16];
	mov.f32 	%f3, 0f3F000000;
	tex.3d.v4.f32.f32	{%f4, %f5, %f6, %f7}, [%rd6, {%f1, %f2, %f3, %f3}];
	cvt.ftz.f64.f32	%fd11, %f4;
	mul.f64 	%fd12, %fd11, 0d406FE00000000000;
	cvt.rzi.s32.f64	%r6, %fd12;
	mad.lo.s32 	%r7, %r11, %r9, %r8;
	or.b32  	%r20, %r9, %r8;
	or.b32  	%r21, %r20, %r5;
	setp.ne.s32	%p4, %r21, 0;
	@%p4 bra 	BB3_7;

	mov.u64 	%rd7, $str;
	cvta.global.u64 	%rd8, %rd7;
	mov.u64 	%rd9, 0;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r22, [retval0+0];
	
	//{
	}// Callseq End 1
	mov.u64 	%rd10, $str1;
	cvta.global.u64 	%rd11, %rd10;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r23, [retval0+0];
	
	//{
	}// Callseq End 2
	add.u64 	%rd12, %SP, 0;
	add.u64 	%rd13, %SPL, 0;
	st.local.v2.u32 	[%rd13], {%r11, %r12};
	mov.u64 	%rd14, $str2;
	cvta.global.u64 	%rd15, %rd14;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r24, [retval0+0];
	
	//{
	}// Callseq End 3
	ld.global.v4.f32 	{%f8, %f9, %f10, %f11}, [%rd5];
	cvt.ftz.f64.f32	%fd13, %f8;
	cvt.ftz.f64.f32	%fd14, %f9;
	cvt.ftz.f64.f32	%fd15, %f10;
	st.local.f64 	[%rd13], %fd13;
	st.local.f64 	[%rd13+8], %fd14;
	st.local.f64 	[%rd13+16], %fd15;
	mov.u64 	%rd17, $str3;
	cvta.global.u64 	%rd18, %rd17;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd18;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r25, [retval0+0];
	
	//{
	}// Callseq End 4
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r26, [retval0+0];
	
	//{
	}// Callseq End 5

BB3_7:
	ld.const.u64 	%rd19, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd20, %rd19;
	mul.wide.u32 	%rd21, %r7, 4;
	add.s64 	%rd22, %rd20, %rd21;
	shl.b32 	%r27, %r6, 8;
	or.b32  	%r28, %r6, %r27;
	shl.b32 	%r29, %r6, 16;
	or.b32  	%r30, %r28, %r29;
	or.b32  	%r31, %r30, -16777216;
	st.global.u32 	[%rd22], %r31;
	ret;
}

.func __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<33>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<88>;


	mov.u64 	%SPL, __local_depot4;
	ld.param.f64 	%fd1, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd35, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd1, %SPL, 0;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd1;
	}
	shr.u32 	%r2, %r1, 20;
	bfe.u32 	%r3, %r1, 20, 11;
	setp.eq.s32	%p1, %r3, 2047;
	@%p1 bra 	BB4_11;

	add.s32 	%r10, %r3, -1024;
	shr.u32 	%r11, %r10, 6;
	mov.u32 	%r12, 15;
	sub.s32 	%r4, %r12, %r11;
	mov.u32 	%r13, 19;
	sub.s32 	%r14, %r13, %r11;
	mov.u32 	%r15, 18;
	min.s32 	%r5, %r15, %r14;
	mov.u64 	%rd82, 0;
	setp.ge.s32	%p2, %r4, %r5;
	mov.u64 	%rd81, %rd1;
	@%p2 bra 	BB4_4;

	bfe.u32 	%r16, %r1, 20, 11;
	add.s32 	%r17, %r16, -1024;
	shr.u32 	%r18, %r17, 6;
	sub.s32 	%r20, %r12, %r18;
	mul.wide.s32 	%rd39, %r20, 8;
	mov.u64 	%rd40, __cudart_i2opi_d;
	add.s64 	%rd77, %rd40, %rd39;
	mov.b64 	 %rd41, %fd1;
	shl.b64 	%rd42, %rd41, 11;
	or.b64  	%rd5, %rd42, -9223372036854775808;
	mov.u64 	%rd82, 0;
	mov.u64 	%rd81, %rd1;
	mov.u64 	%rd79, %rd1;
	mov.u32 	%r32, %r4;

BB4_3:
	.pragma "nounroll";
	ld.const.u64 	%rd45, [%rd77];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd45;    
	mov.b64         {blo,bhi}, %rd5;    
	mov.b64         {clo,chi}, %rd82;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd43, {r0,r1};      
	mov.b64         %rd82, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd79], %rd43;
	add.s32 	%r32, %r32, 1;
	sub.s32 	%r21, %r32, %r4;
	mul.wide.s32 	%rd48, %r21, 8;
	add.s64 	%rd79, %rd1, %rd48;
	add.s64 	%rd81, %rd81, 8;
	add.s64 	%rd77, %rd77, 8;
	setp.lt.s32	%p3, %r32, %r5;
	@%p3 bra 	BB4_3;

BB4_4:
	st.local.u64 	[%rd81], %rd82;
	ld.local.u64 	%rd83, [%rd1+16];
	ld.local.u64 	%rd84, [%rd1+24];
	and.b32  	%r8, %r2, 63;
	setp.eq.s32	%p4, %r8, 0;
	@%p4 bra 	BB4_6;

	mov.u32 	%r22, 64;
	sub.s32 	%r23, %r22, %r8;
	shl.b64 	%rd49, %rd84, %r8;
	shr.u64 	%rd50, %rd83, %r23;
	or.b64  	%rd84, %rd49, %rd50;
	shl.b64 	%rd51, %rd83, %r8;
	ld.local.u64 	%rd52, [%rd1+8];
	shr.u64 	%rd53, %rd52, %r23;
	or.b64  	%rd83, %rd53, %rd51;

BB4_6:
	shr.u64 	%rd54, %rd84, 62;
	cvt.u32.u64	%r24, %rd54;
	shr.u64 	%rd55, %rd83, 62;
	shl.b64 	%rd56, %rd84, 2;
	or.b64  	%rd86, %rd56, %rd55;
	shl.b64 	%rd85, %rd83, 2;
	shr.u64 	%rd57, %rd84, 61;
	cvt.u32.u64	%r25, %rd57;
	and.b32  	%r26, %r25, 1;
	add.s32 	%r27, %r26, %r24;
	neg.s32 	%r28, %r27;
	setp.gt.s32	%p5, %r1, -1;
	selp.b32	%r29, %r27, %r28, %p5;
	cvta.to.local.u64 	%rd58, %rd35;
	st.local.u32 	[%rd58], %r29;
	setp.eq.s32	%p6, %r26, 0;
	@%p6 bra 	BB4_8;

	mov.u64 	%rd62, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd62;
	mov.b64         {a2,a3}, %rd62;
	mov.b64         {b0,b1}, %rd85;
	mov.b64         {b2,b3}, %rd86;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd85, {r0,r1};
	mov.b64         %rd86, {r2,r3};
	}
	// inline asm

BB4_8:
	clz.b64 	%r9, %rd86;
	setp.eq.s32	%p7, %r9, 0;
	@%p7 bra 	BB4_10;

	shl.b64 	%rd65, %rd86, %r9;
	mov.u32 	%r30, 64;
	sub.s32 	%r31, %r30, %r9;
	shr.u64 	%rd66, %rd85, %r31;
	or.b64  	%rd86, %rd66, %rd65;

BB4_10:
	mov.u64 	%rd70, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd86;   
	mov.b64         {blo,bhi}, %rd70;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd67, {r0,r1};     
	mov.b64         %rd68, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd68, 1;

BB4_11:
	ret;
}


